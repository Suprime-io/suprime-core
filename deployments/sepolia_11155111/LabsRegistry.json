{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.24\"},\"sources\":{\"contracts/labs/LabsRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/labs/IWorkflow.sol\\\";\\n\\ncontract LabsRegistry is Ownable{\\n\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    struct Acceleration {\\n        address owner;\\n        address seedRaise;\\n        address publicRaise;\\n    }\\n\\n    // proposalId => Acceleration\\n    mapping(uint256 => Acceleration) public accelerations;\\n    // proposalId => workflows => instances\\n    mapping(uint256 => mapping(address => uint256) workflows) public accelerationWorkflows;\\n\\n    event NewAcceleration(uint256 proposal);\\n    event NewWorkflowForAcceleration(uint256 proposal, address workflow, uint256 workflowInstance);\\n\\n    error NotAuthorized();\\n\\n    constructor() Ownable(msg.sender){\\n\\n    }\\n\\n    modifier byProposalOwner(uint256 _proposalId) {\\n        //TODO Check if done by the proposal's owner\\n        _;\\n    }\\n\\n    function addAcceleration(uint256 _proposalId) byProposalOwner(_proposalId) public {\\n        Acceleration storage _acceleration = accelerations[_proposalId];\\n        _acceleration.owner = msg.sender;\\n        emit NewAcceleration(_proposalId);\\n    }\\n\\n    /// @dev Owner of Acceleration can add (and create) a new Workflow from config\\n    function addWorkflowsToAcceleration(uint256 _proposalId, address[] calldata _workflows, string[] calldata _names) byProposalOwner(_proposalId) public {\\n        Acceleration storage _acceleration = accelerations[_proposalId];\\n        if (_acceleration.owner != msg.sender)\\n            revert NotAuthorized();\\n\\n        for (uint256 i; i < _workflows.length; i++) {\\n            address _workflow = _workflows[i];\\n            string memory _name = _names[i];\\n            IWorkflow _workflowConfig = IWorkflow(_workflow);\\n            uint256 _workflowInstance = _workflowConfig.instantiate(_name);\\n            accelerationWorkflows[_proposalId][_workflow] = _workflowInstance;\\n            emit NewWorkflowForAcceleration(_proposalId, _workflow, _workflowInstance);\\n        }\\n    }\\n\\n\\n}\\n\",\"versionPragma\":\"^0.8.24\"},\"contracts/interfaces/labs/IWorkflow.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.24;\\n\\ninterface IWorkflow {\\n\\n    function instantiate(string memory _nameTag) external returns (uint256);\\n\\n}\\n\",\"versionPragma\":\"^0.8.24\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"}}}","address":"0x706d20dc96984fe72e3dF65E884C0c4BC3A75eB1","bytecode":"0x608060405234801561001057600080fd5b5033600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036100845760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161007b919061019e565b60405180910390fd5b6100938161009960201b60201c565b506101b9565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101888261015d565b9050919050565b6101988161017d565b82525050565b60006020820190506101b3600083018461018f565b92915050565b610c48806101c86000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063cc1eb6611161005b578063cc1eb661146100da578063d38d7f3f146100f6578063f2fde38b14610128578063f775e1b9146101445761007d565b8063715018a61461008257806374164f521461008c5780638da5cb5b146100bc575b600080fd5b61008a610160565b005b6100a660048036038101906100a191906107d1565b610174565b6040516100b39190610820565b60405180910390f35b6100c4610199565b6040516100d1919061084a565b60405180910390f35b6100f460048036038101906100ef9190610865565b6101c2565b005b610110600480360381019061010b9190610865565b610259565b60405161011f93929190610892565b60405180910390f35b610142600480360381019061013d91906108c9565b6102e3565b005b61015e600480360381019061015991906109b1565b610369565b005b6101686105e0565b6101726000610667565b565b6002602052816000526040600020602052806000526040600020600091509150505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b806000600160008481526020019081526020016000209050338160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f2d07a5fc4d30b07d57b58cbdc692f31e12e0ca95e98193bb47ac67d942fb3c3a8360405161024c9190610820565b60405180910390a1505050565b60016020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905083565b6102eb6105e0565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361035d5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610354919061084a565b60405180910390fd5b61036681610667565b50565b8460006001600088815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461040a576040517fea8e4eb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b868690508110156105d657600087878381811061042d5761042c610a46565b5b905060200201602081019061044291906108c9565b9050600086868481811061045957610458610a46565b5b905060200281019061046b9190610a84565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509050600082905060008173ffffffffffffffffffffffffffffffffffffffff1663201db4b5846040518263ffffffff1660e01b81526004016104f09190610b77565b6020604051808303816000875af115801561050f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105339190610bae565b905080600260008e815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f5e7b6540a64673261f4883d329f583df0632883c497ee1cd2dbb284d255bbdbe8c85836040516105bd93929190610bdb565b60405180910390a150505050808060010191505061040d565b5050505050505050565b6105e861072b565b73ffffffffffffffffffffffffffffffffffffffff16610606610199565b73ffffffffffffffffffffffffffffffffffffffff16146106655761062961072b565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161065c919061084a565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b600080fd5b6000819050919050565b6107508161073d565b811461075b57600080fd5b50565b60008135905061076d81610747565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061079e82610773565b9050919050565b6107ae81610793565b81146107b957600080fd5b50565b6000813590506107cb816107a5565b92915050565b600080604083850312156107e8576107e7610733565b5b60006107f68582860161075e565b9250506020610807858286016107bc565b9150509250929050565b61081a8161073d565b82525050565b60006020820190506108356000830184610811565b92915050565b61084481610793565b82525050565b600060208201905061085f600083018461083b565b92915050565b60006020828403121561087b5761087a610733565b5b60006108898482850161075e565b91505092915050565b60006060820190506108a7600083018661083b565b6108b4602083018561083b565b6108c1604083018461083b565b949350505050565b6000602082840312156108df576108de610733565b5b60006108ed848285016107bc565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261091b5761091a6108f6565b5b8235905067ffffffffffffffff811115610938576109376108fb565b5b60208301915083602082028301111561095457610953610900565b5b9250929050565b60008083601f840112610971576109706108f6565b5b8235905067ffffffffffffffff81111561098e5761098d6108fb565b5b6020830191508360208202830111156109aa576109a9610900565b5b9250929050565b6000806000806000606086880312156109cd576109cc610733565b5b60006109db8882890161075e565b955050602086013567ffffffffffffffff8111156109fc576109fb610738565b5b610a0888828901610905565b9450945050604086013567ffffffffffffffff811115610a2b57610a2a610738565b5b610a378882890161095b565b92509250509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112610aa157610aa0610a75565b5b80840192508235915067ffffffffffffffff821115610ac357610ac2610a7a565b5b602083019250600182023603831315610adf57610ade610a7f565b5b509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610b21578082015181840152602081019050610b06565b60008484015250505050565b6000601f19601f8301169050919050565b6000610b4982610ae7565b610b538185610af2565b9350610b63818560208601610b03565b610b6c81610b2d565b840191505092915050565b60006020820190508181036000830152610b918184610b3e565b905092915050565b600081519050610ba881610747565b92915050565b600060208284031215610bc457610bc3610733565b5b6000610bd284828501610b99565b91505092915050565b6000606082019050610bf06000830186610811565b610bfd602083018561083b565b610c0a6040830184610811565b94935050505056fea26469706673582212209e4642236f22365974a8ff378b9475ae8f30cf64b12a7ab964d9889d3cf6a07864736f6c63430008180033","deployedBytecode":"0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063cc1eb6611161005b578063cc1eb661146100da578063d38d7f3f146100f6578063f2fde38b14610128578063f775e1b9146101445761007d565b8063715018a61461008257806374164f521461008c5780638da5cb5b146100bc575b600080fd5b61008a610160565b005b6100a660048036038101906100a191906107d1565b610174565b6040516100b39190610820565b60405180910390f35b6100c4610199565b6040516100d1919061084a565b60405180910390f35b6100f460048036038101906100ef9190610865565b6101c2565b005b610110600480360381019061010b9190610865565b610259565b60405161011f93929190610892565b60405180910390f35b610142600480360381019061013d91906108c9565b6102e3565b005b61015e600480360381019061015991906109b1565b610369565b005b6101686105e0565b6101726000610667565b565b6002602052816000526040600020602052806000526040600020600091509150505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b806000600160008481526020019081526020016000209050338160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f2d07a5fc4d30b07d57b58cbdc692f31e12e0ca95e98193bb47ac67d942fb3c3a8360405161024c9190610820565b60405180910390a1505050565b60016020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905083565b6102eb6105e0565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361035d5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610354919061084a565b60405180910390fd5b61036681610667565b50565b8460006001600088815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461040a576040517fea8e4eb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b868690508110156105d657600087878381811061042d5761042c610a46565b5b905060200201602081019061044291906108c9565b9050600086868481811061045957610458610a46565b5b905060200281019061046b9190610a84565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509050600082905060008173ffffffffffffffffffffffffffffffffffffffff1663201db4b5846040518263ffffffff1660e01b81526004016104f09190610b77565b6020604051808303816000875af115801561050f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105339190610bae565b905080600260008e815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f5e7b6540a64673261f4883d329f583df0632883c497ee1cd2dbb284d255bbdbe8c85836040516105bd93929190610bdb565b60405180910390a150505050808060010191505061040d565b5050505050505050565b6105e861072b565b73ffffffffffffffffffffffffffffffffffffffff16610606610199565b73ffffffffffffffffffffffffffffffffffffffff16146106655761062961072b565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161065c919061084a565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b600080fd5b6000819050919050565b6107508161073d565b811461075b57600080fd5b50565b60008135905061076d81610747565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061079e82610773565b9050919050565b6107ae81610793565b81146107b957600080fd5b50565b6000813590506107cb816107a5565b92915050565b600080604083850312156107e8576107e7610733565b5b60006107f68582860161075e565b9250506020610807858286016107bc565b9150509250929050565b61081a8161073d565b82525050565b60006020820190506108356000830184610811565b92915050565b61084481610793565b82525050565b600060208201905061085f600083018461083b565b92915050565b60006020828403121561087b5761087a610733565b5b60006108898482850161075e565b91505092915050565b60006060820190506108a7600083018661083b565b6108b4602083018561083b565b6108c1604083018461083b565b949350505050565b6000602082840312156108df576108de610733565b5b60006108ed848285016107bc565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261091b5761091a6108f6565b5b8235905067ffffffffffffffff811115610938576109376108fb565b5b60208301915083602082028301111561095457610953610900565b5b9250929050565b60008083601f840112610971576109706108f6565b5b8235905067ffffffffffffffff81111561098e5761098d6108fb565b5b6020830191508360208202830111156109aa576109a9610900565b5b9250929050565b6000806000806000606086880312156109cd576109cc610733565b5b60006109db8882890161075e565b955050602086013567ffffffffffffffff8111156109fc576109fb610738565b5b610a0888828901610905565b9450945050604086013567ffffffffffffffff811115610a2b57610a2a610738565b5b610a378882890161095b565b92509250509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112610aa157610aa0610a75565b5b80840192508235915067ffffffffffffffff821115610ac357610ac2610a7a565b5b602083019250600182023603831315610adf57610ade610a7f565b5b509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610b21578082015181840152602081019050610b06565b60008484015250505050565b6000601f19601f8301169050919050565b6000610b4982610ae7565b610b538185610af2565b9350610b63818560208601610b03565b610b6c81610b2d565b840191505092915050565b60006020820190508181036000830152610b918184610b3e565b905092915050565b600081519050610ba881610747565b92915050565b600060208284031215610bc457610bc3610733565b5b6000610bd284828501610b99565b91505092915050565b6000606082019050610bf06000830186610811565b610bfd602083018561083b565b610c0a6040830184610811565b94935050505056fea26469706673582212209e4642236f22365974a8ff378b9475ae8f30cf64b12a7ab964d9889d3cf6a07864736f6c63430008180033","abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"NotAuthorized","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"proposal","type":"uint256"}],"name":"NewAcceleration","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"proposal","type":"uint256"},{"indexed":false,"internalType":"address","name":"workflow","type":"address"},{"indexed":false,"internalType":"uint256","name":"workflowInstance","type":"uint256"}],"name":"NewWorkflowForAcceleration","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"","type":"address"}],"name":"accelerationWorkflows","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"accelerations","outputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"seedRaise","type":"address"},{"internalType":"address","name":"publicRaise","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_proposalId","type":"uint256"}],"name":"addAcceleration","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_proposalId","type":"uint256"},{"internalType":"address[]","name":"_workflows","type":"address[]"},{"internalType":"string[]","name":"_names","type":"string[]"}],"name":"addWorkflowsToAcceleration","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}]}